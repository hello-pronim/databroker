/*!
 * Imageuploadify - jQuery plugin
 * Allow to change input file to a box allowing drag'n drop and preview images before
 * updloading them.
 */


// Semi-colon to protect against concatened scripts, etc...
// Ensure that $ is referencing to jQuery.
// window and document to slightly quicken the process.
// To be sure that undefined is truly undefined (For ES3)
;
(function($, window, document, undefined) {
    var input_count = false;
    // Array containing all files add by dialog box or drag'n drop.
    let totalFiles = [];
    let removedFiles = [];
    // Prevent issues about browser opening file by dropping it.
    window.addEventListener("dragover", function(e) {
        e = e || event;
        e.preventDefault();
    }, false);
    window.addEventListener("drop", function(e) {
        e = e || event;
        e.preventDefault();
    }, false);

    const compareMimeType = (mimeTypes, fileType, formatFile) => {

        // If accept is defined as *.
        if (mimeTypes.length < 2 && mimeTypes[0] === "*") {
            return true;
        }

        // Checking all types written in accept.
        for (let index = 1; index < mimeTypes.length; index += 3) {

            // image/*, audio/*, video/*
            if (mimeTypes[index + 1] === "*" &&
                fileType.search(new RegExp(mimeTypes[index])) != -1) {
                return true;
            }
            // application/vnd.ms-excel, application/vnd.ms-powerpoint
            else if (mimeTypes[index + 1] && mimeTypes[index + 1] != "*" &&
                fileType.search(new RegExp("\\*" + mimeTypes[index + 1] + "\\*")) != -1) {
                return true;
            }
            // application/pdf, image/jpg
            else if (mimeTypes[index + 1] && mimeTypes[index + 1] != "*" &&
                fileType.search(new RegExp(mimeTypes[index + 1])) != -1) {
                return true;
            }
            // .jpg, .pdf .png
            else if (mimeTypes[index + 1] === "" &&
                (fileType.search(new RegExp(mimeTypes[index])) != -1 || formatFile.search(new RegExp(mimeTypes[index])) != -1)) {
                return true;
            }
        }
        return false;
    }

    // Define the plugin imageuploadify.
    $.fn.imageuploadify = function(opts) {

        // Override default option with user's if exist.
        const settings = $.extend({}, $.fn.imageuploadify.defaults, opts);

        // Initialize every element.
        this.each(function() {

            // Save the current element to self to avoid conflict.
            const self = this;

            // Apply on input file having "multiple" attribute only.
            /*if (!$(self).attr("multiple")) {
              return;
            }*/
            // Save accept files
            let accept = $(self).attr("accept") ? $(self).attr("accept").replace(/\s/g, "").split(",") : null;
            let result = [];

            // Loop the array of accept files to split all part of mimetype or format.
            accept.forEach((item) => {
                let regexp;
                // Select the regexp according to the result (mimetype or format)
                if (item.search(/\//) != -1) {
                    regexp = new RegExp("([A-Za-z-.]*)\/([A-Za-z-*.]*)", "g");
                } else {
                    regexp = new RegExp("\.([A-Za-z-]*)()", "g");
                }
                // Exec the regexp and then 
                const r = regexp.exec(item);
                result = result.concat(r);
            });

            
            // Count the number of time a "dragenter" enter the box.
            let counter = 0;

            var title = $(self).attr("title");
            var fileType = $(self).attr("fileType");
            if (title === undefined || title === '') {
                title = 'Select image from your device';
            }
            if (fileType === undefined || fileType === '') {
                fileType = 'files';
            }
            // Define the dragbox layout.
            let dragbox = $(`
              <div class="imageuploadify well">
                <div class="imageuploadify-overlay">
                <i class="fa fa-picture-o"></i>
                </div>
                <div class="imageuploadify-images-list text-center">          
                  <span class='imageuploadify-message'>Drag and drop ${fileType} here</span>
                  <p>OR</p>
                  <button type="button" class="secondary-btn w225 mgh25">${title}</button>
                </div>
                <div class="description hide" />
                <div class="imageuploadify-image-block hide">
                </div>
              </div>
            `);

            // Save all elements of the dragbox.
            let overlay = dragbox.find(".imageuploadify-overlay");
            let uploadIcon = dragbox.find(".imageuploadify-overlay i");

            let imagesList = dragbox.find(".imageuploadify-image-block");
            let addIcon = dragbox.find(".imageuploadify-images-list i");
            let addMsg = dragbox.find(".imageuploadify-images-list span");
            let button = dragbox.find(".imageuploadify-images-list button");

            let desc_txt = $(self).attr("description");            
            if (desc_txt !== '' && desc_txt !== undefined) {
                dragbox.find('.description').html(desc_txt);
                dragbox.find('.description').removeClass('hide');
            }
            if ($(self).attr("filelist") !== undefined) {
                imagesList.addClass('file-entries');
            } else {
                imagesList.addClass('thumbnails');
            }

            /** FUNCTIONS  **/

            const hideDummyZone = () => {
                imagesList.html('');
                dragbox.find('.imageuploadify-images-list').addClass('hide');
                dragbox.find('.description').addClass('hide');
            }


            // Function to read and store files. 
            const retrieveFiles = (files, input_name) => {
                hideDummyZone();

                for (let index = 0; index < files.length; ++index) {
                    if (!accept || compareMimeType(result, files[index].type, /(?:\.([^.]+))?$/.exec(files[index].name)[1])) {
                        // Unique number to save the image.
                        const id = Math.random().toString(36).substr(2, 9);                        
                        readingFile(id, files[index]);
                        if (totalFiles[input_name] === undefined) {
                            totalFiles[input_name] = [];
                        }
                        totalFiles[input_name].push({
                            id: id,
                            file: files[index],
                            origin: 'local'
                        });
                    }
                }
            }

            // Function to read a file.
            const readingFile = (id, file) => {
                const fReader = new FileReader();              

                if (file.type && file.type.search(/image/) != -1) {
                    // Associated function to a ending load
                    fReader.onloadend = function(e) {
                        appendFileContainer(id, file.type, e.target.result);
                    }
                    // Use the FileReader to read the content of a File.
                    fReader.readAsDataURL(file);
                } else if (file.type) {
                    appendFileContainer(id, file.type, file.name);
                }
                //console.log(file);
            };

            const appendFileContainer = (id, filetype, content) => {
                // Compute the number of box that could fit in the dragbox and the
                // margin according to it.
                const width = dragbox.width();
                const boxesNb = Math.floor(width / 100);
                var marginSize = Math.floor((width - (boxesNb * 100)) / (boxesNb + 1));

                // Create the preview file container box.
                let deleteBtn = $('<i class="material-icons remove icon-delete">cancel</i>');
                let container = $(`
                  <div class='imageuploadify-container'>                              
                    <!--<div class='imageuploadify-details'>
                      <span>${content}</span>
                      <span>${filetype}</span>
                    </div>-->
                  </div>
                  `);

                let details = container.find(".imageuploadify-details");

                if ($(self).attr("multiple") === undefined) {
                    marginSize = 0;
                }
                // Preview file container box CSS
                // container.css("margin-left", marginSize + "px");

                // Manage display/hidding details about preview files.
                details.hover(function() {
                        $(this).css("opacity", "1");
                    })
                    .mouseleave(function() {
                        $(this).css("opacity", "0");
                    });

                // If the given file in the parameter is an image.
                if (filetype.search(/image/) != -1) {
                    //console.log(e.target);
                    // Create the image tag for preview.
                    // let image = $("<img>");
                    // Paste the image source to display the image preview.
                    // image.attr("src", e.target.result);

                    // Append the image to its container and then the container to the
                    // list of files.
                    // container.append(image);
                    // container.css('background', `url("${e.target.result}")  no-repeat center center fixed`);
                    container.css('background-image', `url("${content}")`);
                    container.css('background-size', 'contain');
                    container.css('background-position', 'center');
                    container.css('background-repeat', 'no-repeat');
                    container.append(deleteBtn);
                    container.addClass('thumbnails');
                    if ($(self).attr("multiple") === undefined) {
                        container.addClass('single');
                    }

                    imagesList.append(container);
                    imagesList.removeClass('hide');

                    // Apply left margin to first container of each row and right to last.
                    // imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                    // imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");

                } else {
                    // Create the generic icon for unknown type file.
                    let type = "<i class='fa fa-file'></i>";

                    // If the file is an audio file, replace the icon by an audio file icon.
                    if (filetype.search(/audio/) != -1) {
                        type = "<i class='fa fa-file-audio-o'></i>";
                    }
                    // If the file is an video file, replace the icon by an video file icon.
                    else if (filetype.search(/video/) != -1) {
                        type = "<i class='fa fa-file-video-o'></i>";
                    }

                    // Associated function to a ending load
                    // fReader.onloadend = function(e) {
                        // Create the span tag for the file type.
                        let span = $("<span class='flex-vcenter'>" + type + content + "</span>");

                        // Span CSS.
                        // span.css("font-size", "5em");
                        span.append(deleteBtn);

                        // Append the span to its container and then the container to the
                        // list of files.
                        container.append(span);
                        container.addClass('file-entry');

                        imagesList.append(container);
                        imagesList.removeClass('hide');

                        // Apply left margin to first container of each row and right to last.
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");
                    // };
                }

                // Delete the file from the list.
                deleteBtn.on("click", function() {
                    $(this).closest('.imageuploadify-container').remove();
                    let input_name = self.name;
                    let files = totalFiles[input_name];
                    for (let index = 0; files.length > index; ++index) {
                        let file = files[index];
                        if (file.id === id) {
                            if (file.origin === 'remote') {
                                if ($(self).attr("multiple") !== undefined) {
                                    if (removedFiles[input_name] === undefined) {
                                        removedFiles[input_name] = [];
                                    }
                                    removedFiles[input_name].push(file);
                                }
                            }
                            files.splice(index, 1);
                            break;
                        }
                    }

                    if (files.length < 1) {
                        dragbox.find(".imageuploadify-image-block").addClass('hide');
                        dragbox.find(".imageuploadify-images-list").removeClass('hide');
                        dragbox.find('.description').removeClass('hide');
                        $(self).val('');
                    }
                });
            }

            const disableMouseEvents = () => {
                // Display the overlay and change the dragbox border color.
                overlay.css("display", "flex");
                dragbox.css("border-color", "#3AA0FF");

                // Disable pointer events to avoid miscapture dragexit children's events.
                button.css("pointer-events", "none");
                addMsg.css("pointer-events", "none");
                addIcon.css("pointer-events", "none");
                imagesList.css("pointer-events", "none");
            }

            const enableMouseEvents = () => {
                // Hide the overlay and put back the dragbox border color.
                overlay.css("display", "none");
                dragbox.css("border-color", "rgb(210, 210, 210)");

                // Enable back pointer events to capture click, hover... 
                button.css("pointer-events", "initial");
                addMsg.css("pointer-events", "initial");
                addIcon.css("pointer-events", "initial");
                imagesList.css("pointer-events", "initial");
            }

            const prepareRemoteFilesPreview = () => {
                let remoteroot = $(self).attr('remoteroot');
                let remotefiletype = $(self).attr('remotefiletype');
                let remotefile_json = $(self).attr('remotefile');
                var input_name = $(self).attr('name') ;
                if (remoteroot !== undefined) {
                    let remotefiles = JSON.parse(remotefile_json);
                    hideDummyZone();
                    for (var i = 0; i < remotefiles.length; i++) {
                        let remotefile = remotefiles[i];
                        const id = Math.random().toString(36).substr(2, 9);          
                        // let ext = remotefile.split('.').pop();
                        let uri = remoteroot +  '/' + remotefile;
                        let content = remotefiletype == 'image' ? uri : remotefile;
                        appendFileContainer(id, remotefiletype, content);
                        if (totalFiles[input_name] === undefined) {
                            totalFiles[input_name] = [];
                        }
                        totalFiles[input_name].push({
                            id: id,
                            file: content,
                            filename: remotefile,
                            origin: 'remote'
                        });
                    }
                }
            };
            prepareRemoteFilesPreview();

            /** EVENTS  */


            // Change the color background of the button according to the mouse.
            button.mouseenter(function onMouseEnter(event) {
                // button.css("background", "#3AA0FF").css("color", "white");
            }).mouseleave(function onMouseLeave() {
                // button.css("background", "white").css("color", "#3AA0FF");
            });


            // When click on the button, simulate click on the original input.
            button.on("click", function onClick(event) {
                event.stopPropagation();
                event.preventDefault();
                $(self).click();
            });

            // Manage events to display an overlay when dragover files.
            dragbox.on("dragenter", function onDragenter(event) {
                event.stopPropagation();
                event.preventDefault();

                // Increment the counter.
                counter++;
                disableMouseEvents();
            });

            // Manage events to hide the overlay when dragout files.
            dragbox.on("dragleave", function onDragLeave(event) {
                event.stopPropagation();
                event.preventDefault();

                // Decrease the counter.
                counter--;

                // If the counter is equal to 0 (means that the files are entirely out
                // of the dragbox).
                if (counter === 0) {
                    enableMouseEvents();
                }
            });

            // Manage events when dropping files.
            dragbox.on("drop", function onDrop(event) {
                event.stopPropagation();
                event.preventDefault();

                enableMouseEvents();
                // Retrieve the dragged files.
                const files = event.originalEvent.dataTransfer.files;

                // Read all files (to add them to the preview and push them to the files
                // list to submit).
                var input_name = $(event.target).closest('.fileupload').find('input[type="file"]').attr('name') ;
                retrieveFiles(files, input_name);
            });

            // Binding resize event to the window.
            $(window).bind("resize", function(e) {
                window.resizeEvt;
                $(window).resize(function() {
                    // Delete the timeout as long as the window is still resizing.
                    clearTimeout(window.resizeEvt);
                    // Compute and change the margin according to the size of the window after
                    // 0.5 seconds after resizing.
                    window.resizeEvt = setTimeout(function() {
                        // Compute the number of box that could fit in the dragbox and the
                        // margin according to it.
                        const width = dragbox.width();
                        const boxesNb = Math.floor(width / 100);
                        const marginSize = Math.floor((width - (boxesNb * 100)) / (boxesNb + 1));

                        // Reset all margins of containers boxes.
                        let containers = imagesList.find(".imageuploadify-container");
                        for (let index = 0; index < containers.length; ++index) {
                            $(containers[index]).css("margin-right", "0px");
                            $(containers[index]).css("margin-left", marginSize + "px");
                        }

                        // Apply left margin to first container of each row and right to last.
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+4)").css("margin-left", marginSize + "px");
                        imagesList.find(".imageuploadify-container:nth-child(" + boxesNb + "n+3)").css("margin-right", marginSize + "px");
                    }, 500);
                });
            })

            // Detect when adding files through the dialog box to preview those files
            // and add them to the array.
            $(self).on("change", function onChange() {
                const files = this.files;
                retrieveFiles(files, self.name);
            });

            // When submitting the form.
            if (input_count == false) {
                input_count = true;
                $(self).closest("form").on("submit", function(event) {
                    // Stop the original submit.        
                    event.preventDefault();
                    event.stopPropagation();

                    $('.is-invalid').removeClass('is-invalid');
                    $('.invalid-feedback strong').html("");

                    // Retrieve all form inputs.
                    const inputs = this.querySelectorAll("input, textarea, select, button");
                    // Create a form.
                    const formData = new FormData();

                    // Add all data to the form (selected options, checked inputs, etc...).
                    for (let index = 0; index < inputs.length; ++index) {
                        if (inputs[index].tagName === "SELECT" && inputs[index].hasAttribute("multiple")) {
                            const options = inputs[index].options;
                            for (let i = 0; options.length > i; ++i) {
                                if (options[i].selected) {
                                    formData.append(inputs[index].getAttribute("name"), options[i].value);
                                }
                            }
                        } else if (!inputs[index].getAttribute("type") || ((inputs[index].getAttribute("type").toLowerCase()) !== "checkbox" && (inputs[index].getAttribute("type").toLowerCase()) !== "radio") || inputs[index].checked) {
                            formData.append(inputs[index].name, inputs[index].value);
                        } else if (inputs[index].getAttribute("type")  != "file") {
                            formData.append(inputs[index].name, inputs[index].value);
                        }
                    }

                    // Add all files get from the dialog box or drag'n drop,
                    var temp_total = 0;      

                    var filename = $(self).attr('name');
                    for (let input_name in totalFiles) {
                        let files = totalFiles[input_name];
                        for (var i = 0; i < files.length; i++) {                         	               	
                            var file = files[i];
                            if (file.origin === 'remote') {
                                break;
                            }
    						formData.append(`${input_name}_${i+1}`, file.file);
                        }
                        let removes = removedFiles[input_name];
                        if (removes !== undefined) {
                            for (var j = 0; j < removes.length; j++) {
                                formData.append(`removed_${input_name}_${j+1}`, removes[j].filename);
                            }
                        }
                    }

                    // Create an request and post all data.
                    var xhr = new XMLHttpRequest();
                    // When the request has been successfully submitted, redirect to the
                    // location of the form.        
                    xhr.onreadystatechange = function(e) {
                        if (xhr.readyState !== XMLHttpRequest.DONE)
                            return;
                        if (xhr.status == 200) {
                            //window.location.replace(xhr.responseURL);
                            $(".xh_loading").removeClass('on');
                            var response = JSON.parse(xhr.response);
                            if(response.success == true){
                                if(response.redirect !== undefined){
                                    window.location.href = response.redirect;
                                }else{
                                    alert("Successfully added.");        
                                }
                            }else{
                                if(response.result !==undefined){
                                    result = response.result;
                                    $.each(result, function(field,messages){
                                        $("#"+field).addClass('is-invalid');
                                        $('.invalid-feedback.'+field+" strong").html(messages[0]);
                                    });
                                }
                                if(response.redirect !== undefined){
                                    window.location.href = response.redirect;
                                }
                            }                         
                        } else {
                            $(".xh_loading").removeClass('on');
                            alert("Sorry. There's an error. Please try again later!", e, xhr);
                        }
                    }
                    if ($('.xh_loading').hasClass('on')) {
                    } else {
                        $(".xh_loading").addClass('on');
                        console.log('post', $(this).attr("action"));
                        xhr.open("POST", $(this).attr("action"), true);
                        xhr.send(formData);
                    }

                    return false;
                });

            }
            // Hide the original input.
            $(self).hide();
            // Insert the dragbox after the original hidden input.
            dragbox.insertAfter(this);
        });

        // Return "this" to ensure that chaining methods can be called.
        return this;
    };


    // Default configuraiton of the plugin.
    $.fn.imageuploadify.defaults = {};

}(jQuery, window, document));